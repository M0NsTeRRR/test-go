---
# THIS FILE IS GENERATED! DO NOT EDIT! Maintained by Pulumi
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: go release
on:
  push:
    tags:
      - '*'
permissions: {}
jobs:
  changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      release_body: ${{ steps.git-cliff.outputs.content }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Generate a changelog
        id: git-cliff
        uses: orhun/git-cliff-action@4a4a951bc43fafe41cd2348d181853f52356bee7 # v4.4.2
        with:
          config: .github/cliff.toml
          args: -vv --current
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}


  get-version:
    name: Get version
    runs-on: ubuntu-latest
    permissions: {}
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Get the version
        id: get_version
        run: echo "VERSION=$(echo '${{ github.ref_name }}' | sed 's/^v//')" >> $GITHUB_OUTPUT

  build-artifact:
    name: Build binary
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
    needs: [get-version]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            arch: amd64
            runner: ubuntu-latest
          - os: linux
            arch: arm64
            runner: ubuntu-24.04-arm
          - os: darwin
            arch: amd64
            runner: macos-13
          - os: darwin
            arch: arm64
            runner: macos-latest
          - os: windows
            arch: amd64
            runner: windows-latest
          - os: windows
            arch: arm64
            runner: windows-11-arm
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: stable

      - name: Generate filename
        id: generate-filename
        run: |
          echo "BINARY_NAME=${{ github.event.repo.name }}" >> $GITHUB_OUTPUT
          echo "SBOM_NAME=${{ github.event.repo.name }}-${{ needs.get-version.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.sbom" >> $GITHUB_OUTPUT
          echo "TAR_GZ_NAME=${{ github.event.repo.name }}-${{ needs.get-version.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz" >> $GITHUB_OUTPUT

      - name: Build binary
        run: go build -o "${{ steps.generate-filename.outputs.BINARY_NAME }}" -ldflags "-X main.version=${{ github.ref_name }}" main.go
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0

      - name: Create tar.gz of binary with license and readme
        run: tar -czf ${{ steps.generate-filename.outputs.TAR_GZ_NAME }} ${{ steps.generate-filename.outputs.BINARY_NAME }} LICENSE.txt LICENSE_en.txt README.md

      - name: Generate SBOM
        uses: anchore/sbom-action@cee1b8e05ae5b2593a75e197229729eabaa9f8ec # v0.20.2
        with:
          format: cyclonedx-json
          artifact-name: ${{ steps.generate-filename.outputs.SBOM_NAME }}
          upload-artifact: false
          upload-release-assets: false

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: artifacts-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            ${{ steps.generate-filename.outputs.TAR_GZ_NAME }}
            ${{ steps.generate-filename.outputs.SBOM_NAME }}
          if-no-files-found: error

  create-checksum:
    name: Create checksum
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [build-artifact]
    steps:
      - name: Downloads artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          pattern: artifacts-*
          merge-multiple: true
          path: /tmp/artifacts

      - name: Create checksum file
        run: |
          shopt -s nullglob
          for archive in /tmp/artifacts/*.tar.gz; do
            CHECKSUM=$(sha256sum ${archive})
            echo $CHECKSUM >> checksums.txt
          done

      - name: Upload checksum
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: artifacts-checksums
          path: checksums.txt
          if-no-files-found: error

  sign-publish-artifact:
    name: Sign and publish artifact
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write # needed for signing the artifact with GitHub OIDC Token
    needs: [create-checksum]
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

      - name: Downloads artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          pattern: artifacts-*
          merge-multiple: true
          path: /tmp/artifacts

      - name: Sign the artifacts with GitHub OIDC Token
        env:
          COSIGN_YES: true
        run: |
          shopt -s nullglob
          for archive in /tmp/artifacts/*.tar.gz; do
            archive_without_ext="${archive%.tar.gz}"
            cosign sign-blob ${archive} --output-certificate ${archive_without_ext}.pem --output-signature ${archive_without_ext}.sig
          done

      - name: Attest SBOM
        run: |
          shopt -s nullglob
          for sbom in /tmp/artifacts/*.sbom; do
            sbom_without_ext="${sbom%.sbom}"
            cosign attest-blob -y --type cyclonedx --predicate ${sbom} --output-attestation ${sbom_without_ext}.sbom.intoto.jsonl ${sbom_without_ext}.tar.gz
          done

      - name: Upload artifact to release
        run: gh release upload ${{ github.ref }} /tmp/artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger Go Proxy Indexing
        run: |
          MAJOR_VERSION=$(echo "${{ github.ref_name }}" | cut -d '.' -f 1 | sed 's/v//')

          if [[ $MAJOR_VERSION -ge 2 ]]; then
            curl https://sum.golang.org/lookup/github.com/${{ github.repository }}/v${MAJOR_VERSION}@${{ github.ref_name }}
            curl https://proxy.golang.org/github.com/${{ github.repository }}/v${MAJOR_VERSION}/@v/${{ github.ref_name }}.info
          else
            curl https://sum.golang.org/lookup/github.com/${{ github.repository }}@${{ github.ref_name }}
            curl https://proxy.golang.org/github.com/${{ github.repository }}/@v/${{ github.ref_name }}.info
          fi

  build-push-docker:
    name: Build and publish docker
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # needed for pushing docker image
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build-and-push.outputs.digest }}
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest
            type=semver,pattern={{version}}

      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  sign-docker:
    name: Sign docker artifact
    runs-on: ubuntu-latest
    permissions:
      packages: write # needed for pushing docker signature
      id-token: write # needed for signing the images with GitHub OIDC Token
    needs: [build-push-docker]
    env:
      DIGEST: ${{ needs.docker.outputs.digest }}
      TAGS: ${{ needs.docker.outputs.tags }}
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@cee1b8e05ae5b2593a75e197229729eabaa9f8ec # v0.20.2

      - name: Sign the images with GitHub OIDC Token
        run: |
          for tag in ${TAGS}; do
            cosign sign -y --recursive ${tag}@${DIGEST}
          done

      - name: Generate SBOM
        run: |
          shopt -s nullglob
          for tag in ${TAGS}; do
            syft --output cyclonedx-json ${tag}@${DIGEST} > ${tag}@${DIGEST}.sbom
          done

      - name: Attest images with SBOM
        run: |
          shopt -s nullglob
          for tag in ${TAGS}; do
            cosign attest -y --recursive --type cyclonedx --predicate ${tag}@${DIGEST}.sbom ${tag}@${DIGEST}
          done

  publish-release:
    name: Publish release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [changelog, sign-publish-artifact, sign-docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Create release
        run: gh release create ${GITHUB_REF_NAME}  -t "Release ${GITHUB_REF_NAME}" -n "${RELEASE_BODY}"
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          RELEASE_BODY: ${{needs.changelog.outputs.release_body}}